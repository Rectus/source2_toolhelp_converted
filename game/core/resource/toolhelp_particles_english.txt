"lang" 
{ 
	"Language" "English" 
	"Tokens" 
	{	

		"Attribute.C_OP_BasicMovement.m_Gravity" "Gravity"
		"Attribute.C_OP_BasicMovement.m_Gravity:shorthelp" ""
		"Attribute.C_OP_BasicMovement.m_Gravity:help" "Gravitational effect on the particles."

		"Element.C_OP_RenderTrailsWithRenderSystem" "Render Trails"
		"Element.C_OP_RenderTrailsWithRenderSystem:shorthelp" ""
		"Element.C_OP_RenderTrailsWithRenderSystem:help" "Render sprite trails"

		"Element.C_OP_RenderSpritesWithRenderSystem" "Render Sprites"
		"Element.C_OP_RenderSpritesWithRenderSystem:shorthelp" ""
		"Element.C_OP_RenderSpritesWithRenderSystem:help" "Render sprites"

		"Element.C_OP_RenderRopesWithRenderSystem" "Render Ropes"
		"Element.C_OP_RenderRopesWithRenderSystem:shorthelp" ""
		"Element.C_OP_RenderRopesWithRenderSystem:help" "Render ropes"

		"Element.C_OP_RenderGrid" "Render Grid"
		"Element.C_OP_RenderGrid:shorthelp" ""
		"Element.C_OP_RenderGrid:help" "Render particles in a grid (ie. cloth)"

		"Attribute.C_OP_RenderSpritesWithRenderSystem.m_flMaxSize" "Max Visual Size"
		"Attribute.C_OP_RenderSpritesWithRenderSystem.m_flMaxSize:shorthelp" ""
		"Attribute.C_OP_RenderSpritesWithRenderSystem.m_flMaxSize:help" "Individual particles will never render larger than this number as a fraction of screen size. (0.5 is 50% of the screen)"

		"Attribute.C_OP_RenderSpritesWithRenderSystem.m_flMinSize" "Min Visual Size"
		"Attribute.C_OP_RenderSpritesWithRenderSystem.m_flMinSize:shorthelp" ""
		"Attribute.C_OP_RenderSpritesWithRenderSystem.m_flMinSize:help" "Individual particles will never render smaller than this number as a fraction of screen size. (0.5 is 50% of the screen)"

		"Element.CParticleSystemDefinition" "Base Properties"
		"Element.CParticleSystemDefinition:shorthelp" ""
		"Element.CParticleSystemDefinition:help" "<i>For a general introduction to the particle effect engine and tools, please visit <a href = ''https://developer.valvesoftware.com/wiki/Particle_Editor''>the Valve Developer Community page</a>.</i>
<p>These are the core properties of the effect. Most of these lie outside the scope of operators, and many define low-level engine settings that are generally left to their default values.</p>
<p>The properties that will most commonly be modified are:</p>
<ul>
<li><b>initial_particles</b>
<li><b>bounding_box_min</b> and <b>bounding_box_max</b>
<li>fallback replacement definition
<li>view model effect
<li>screen space effect
<li><b>max_particles</b>
</ul>
<p>Additionally, some properties are here to provide a simple mechanism for defining effect defaults which can then be overridden by operators when necessary. These include:</p>
<ul>
<li><b>color</b>
<li><b>radius</b>
<li><b>rotation</b>
<li><b>rotation_speed</b>
<li><b>lifetime</b>
<li><b>sequence_number</b>
<li><b>sequence_number 1</b>"

		"Element.C_OP_Decay" "Lifespan Decay"
		"Element.C_OP_Decay:shorthelp" ""
		"Element.C_OP_Decay:help" "<p>This enables particles to be destroyed by the effect.</p>
<p>All effects should have a Decay Operator (usually Lifespan Decay) unless you're certain that the particles will get destroyed by some other means (usually code.)</p>"

		"Attribute.CParticleOperatorInstance.m_Notes" "Operator Help and Notes"
		"Attribute.CParticleOperatorInstance.m_Notes:shorthelp" ""
		"Attribute.CParticleOperatorInstance.m_Notes:help" "<p>Adding comments to your effects can be useful if there are multiple artists passing files around.</p>
<p>Sometimes it's even helpful to maintain effect documentation for yourself - particularly if you've got a complex or fragile setup that isn't self-evident just by looking at the effect. (For example, if you're using a lot of non-standard data being passed via CPs from the engine, or if you're making heavy use of Operator Fade/Time Offset/Strength Modifiers/Timescale Modifiers.)</p>"

		"Element.C_OP_BasicMovement" "Movement Basic"
		"Element.C_OP_BasicMovement:shorthelp" ""
		"Element.C_OP_BasicMovement:help" "<p>Enables basic movement for particles. (''Basic'' in the sense of <i>fundamental</i> rather than simplistic.)</p>
<p>It's not a bad idea to always add Movement Basic to new effects; if it ends up being spatially static later, you can remove the Operator for a tiny performance gain.</p>"

		"Element.C_OP_RenderSprites" "Sprite Renderer"
		"Element.C_OP_RenderSprites:shorthelp" ""
		"Element.C_OP_RenderSprites:help" "<p>Renders single- and multiple-frame sprites.</p>

<p>Multi-frame sequences can be animated or used to provide visual variation.</p>

<p>render_sprites is the workhorse renderer, and the one you're likely to be using most of the time.</p>"

		"Element.C_OP_RenderTrails" "Sprite Trail Renderer"
		"Element.C_OP_RenderTrails:shorthelp" ""
		"Element.C_OP_RenderTrails:help" "<p>Trails are sprites with additional built-in behavior that stretches them based on their speed over time.</p>
<p>Traditional use cases for trails include bullet tracers and sparks. Advanced users may also find them useful when particles need to be oriented in 3D space (a case that regular sprites handle poorly.)</p>"

		"Element.C_OP_RenderRopes" "Rope Renderer"
		"Element.C_OP_RenderRopes:shorthelp" ""
		"Element.C_OP_RenderRopes:help" "<p>Ropes (which were named in a simpler time) are sequences of sprites streched across a set of points. Textures intended for use on rope particles are often tiled along one axis so they can be used to create long, thin, curved forms in 3D space.</p>
<p>Ropes can be difficult to work with, but are surprisingly powerful and versatile.</p>"

		"Element.C_INIT_CreateWithinSphere" "Position Within Sphere Random"
		"Element.C_INIT_CreateWithinSphere:shorthelp" ""
		"Element.C_INIT_CreateWithinSphere:help" "<p>Randomly spawns a particle within a sphere that's centered on the specified control point.</p>"

		"Element.C_INIT_CreateWithinBox" "Position Within Box Random"
		"Element.C_INIT_CreateWithinBox:shorthelp" ""
		"Element.C_INIT_CreateWithinBox:help" "<p>Randomly spawns a particle within the specified volume.</p>"

		"Element.C_OP_ContinuousEmitter" "Continuous Emitter"
		"Element.C_OP_ContinuousEmitter:shorthelp" ""
		"Element.C_OP_ContinuousEmitter:help" "<p>Emits particles at the specified rate over time. By default, this emitter will continue to emit forever.</p>"

		"Element.C_OP_InstantaneousEmitter" "Instantaneous Emitter"
		"Element.C_OP_InstantaneousEmitter:shorthelp" ""
		"Element.C_OP_InstantaneousEmitter:help" "<p>Emits the specified number of particles all at once and never repeats.</p>"

		"Element.C_INIT_RandomLifeTime" "Lifetime Random"
		"Element.C_INIT_RandomLifeTime:shorthelp" ""
		"Element.C_INIT_RandomLifeTime:help" "<p>Defines the lifetime of each particle in seconds, chosen randomly, between <b>lifetime_min</b> and <b>lifetime_max</b>.</p>"

		"Element.C_INIT_PositionPlaceOnGround" "Position Modify Place On Ground"
		"Element.C_INIT_PositionPlaceOnGround:shorthelp" ""
		"Element.C_INIT_PositionPlaceOnGround:help" "<p>''Snaps'' each particle to the ground (or a specified offset above the ground.)</p>
<p>Note that this operator only searches for ground BELOW its current position - if the particle is already below the ground, it won't snap to the ground above. If there's any doubt, simply add a Position Modify Offset Random initializer above this one in the initializer stack.</p>"

		"Element.C_INIT_RandomAlpha" "Alpha Random"
		"Element.C_INIT_RandomAlpha:shorthelp" ""
		"Element.C_INIT_RandomAlpha:help" "<p>Particles will be created with a random alpha value within the specified range (0-255).</p>"

		"Element.C_INIT_RandomScalar" "Scalar Random"
		"Element.C_INIT_RandomScalar:shorthelp" ""
		"Element.C_INIT_RandomScalar:help" "<p>Allows any exposed scalar (such as radius, alpha, lifetime, etc.) to be initialized with a random value within the specified range.</p>"

		"Element.C_INIT_RemapScalar" "Remap Initial Scalar"
		"Element.C_INIT_RemapScalar:shorthelp" ""
		"Element.C_INIT_RemapScalar:help" "<p>Remaps any exposed scalar's initial value to any other scalar.</p>"

		"Element.C_OP_RemapScalar" "Remap Scalar"
		"Element.C_OP_RemapScalar:shorthelp" ""
		"Element.C_OP_RemapScalar:help" "<p>Remaps any exposed scalar's value to any other scalar on an ongoing basis.</p>"

		"Element.C_OP_FadeInSimple" "Alpha Fade In Simple"
		"Element.C_OP_FadeInSimple:shorthelp" ""
		"Element.C_OP_FadeInSimple:help" "<p>Fades particles in over time.</p>
<p><b>proportional fade in time</b> is a percentage of the particle's lifetime, expressed as a range between 0 and 1. (So a setting of 0.5 on a particle with a 4-second lifetime would take 2 seconds to fade in completely.)</p>"

		"Element.C_OP_FadeOutSimple" "Alpha Fade Out Simple"
		"Element.C_OP_FadeOutSimple:shorthelp" ""
		"Element.C_OP_FadeOutSimple:help" "<p>Fades particles out over time.</p>
<p><b>proportional fade out time</b> is a percentage of the particle's lifetime, expressed as a range between 0 and 1. (So a setting of 0.25 on a particle with a 4-second lifetime would start fading out 3 seconds after being emitted, and would take 1 second to fade out completely.)</p>"

		"Element.C_OP_AttractToControlPoint" "Pull Towards Control Point"
		"Element.C_OP_AttractToControlPoint:shorthelp" ""
		"Element.C_OP_AttractToControlPoint:help" "<p>Pulls particles toward the specified control point.</p>
<p>Can also be used to repel particles - simply use negative values for <b>amount of force</b>."

		"Attribute.CParticleSystemDefinition.m_nMaxParticles" "Maximum Particles"
		"Attribute.CParticleSystemDefinition.m_nMaxParticles:shorthelp" ""
		"Attribute.CParticleSystemDefinition.m_nMaxParticles:help" "<p>The maximum number of individual particles that can exist at any time for this system. Any attempts to emit additional particles beyond this maximum will fail.</p>
<p>The particle engine reserves memory for this maximum, so set this as low as you can once you've finished working on your effect.</p>
<p><em>Note that this setting is specific to <b>this effect</b> - any child effects will use their own <b>max_particles</b> setting.</em></p>"

		"Attribute.CParticleSystemDefinition.m_flConstantLifespan" "Lifetime"
		"Attribute.CParticleSystemDefinition.m_flConstantLifespan:shorthelp" ""
		"Attribute.CParticleSystemDefinition.m_flConstantLifespan:help" "<p>The amount of time, in seconds, that each particle will exist before being destroyed.</p>"

		"Attribute.CParticleSystemDefinition.m_nInitialParticles" "Initial Particles"
		"Attribute.CParticleSystemDefinition.m_nInitialParticles:shorthelp" ""
		"Attribute.CParticleSystemDefinition.m_nInitialParticles:help" "<p>Number of additional particles that should be emitted the moment the effect is created, independent of any emitter operators.</p>"

		"Attribute.CParticleSystemDefinition.m_ConstantNormal" "Normal"
		"Attribute.CParticleSystemDefinition.m_ConstantNormal:shorthelp" ""
		"Attribute.CParticleSystemDefinition.m_ConstantNormal:help" "<p>Particle <a href=''https://en.wikipedia.org/wiki/Normal_(geometry)''>normal</a> alignment. Values range between 0 and 1.</p>
<p>For most effects this should remain unchanged from its default (0,0,1).</p>
<p>This field is ignored unless the <b>orientation_type</b> property in the effect's renderer is set to ''Particle Normal Align'' or ''Screen & Particle Normal Align''.</p>"

		"Element.C_OP_WorldTraceConstraint" "Collision Via Traces"
		"Element.C_OP_WorldTraceConstraint:shorthelp" ""
		"Element.C_OP_WorldTraceConstraint:help" "<p>Allows particles to collide with scene geometry.</p>

<p><b>USE SPARINGLY!</b> Per-particle collision is one of the most expensive effects operations performance-wise. Also, make sure you always replace the <b>collision group</b> property ''NONE'' with ''DEBRIS''."

		"Element.C_OP_MaintainEmitter" "Emit to Maintain Count"
		"Element.C_OP_MaintainEmitter:shorthelp" ""
		"Element.C_OP_MaintainEmitter:help" "<p>Emits particles until it reaches the specified <b>count to maintain</b>, and then stops. Whenever particles are destroyed (by whatever means), the emitter will kick in again to bring the count back up to the max.</p>"

		"Element.C_INIT_RandomRadius" "Radius Random"
		"Element.C_INIT_RandomRadius:shorthelp" ""
		"Element.C_INIT_RandomRadius:help" "<p>Initializes each particle with a random radius within the specified range.</p>"

		"Element.C_INIT_RandomColor" "Color Random"
		"Element.C_INIT_RandomColor:shorthelp" ""
		"Element.C_INIT_RandomColor:help" "<p>Initializes each particle with a random color within the specified range.</p>"

		"Element.C_OP_DistanceCull" "Cull When Crossing Sphere"
		"Element.C_OP_DistanceCull:shorthelp" ""
		"Element.C_OP_DistanceCull:help" "<p>Instantly destroys particles when they pass the specified spherical threshold.</p>"

		"Attribute.C_OP_InstantaneousEmitter.m_flStartTime" ""
		"Attribute.C_OP_InstantaneousEmitter.m_flStartTime:shorthelp" ""
		"Attribute.C_OP_InstantaneousEmitter.m_flStartTime:help" "Time at which to begin emitting particles (seconds)."

		"Attribute.C_OP_InstantaneousEmitter.m_nParticlesToEmit" ""
		"Attribute.C_OP_InstantaneousEmitter.m_nParticlesToEmit:shorthelp" ""
		"Attribute.C_OP_InstantaneousEmitter.m_nParticlesToEmit:help" "Number of particles to emit in a burst."

		"Attribute.C_OP_InstantaneousEmitter.m_nMinParticlesToEmit" ""
		"Attribute.C_OP_InstantaneousEmitter.m_nMinParticlesToEmit:shorthelp" ""
		"Attribute.C_OP_InstantaneousEmitter.m_nMinParticlesToEmit:help" "<p>The minimum number of particles to emit in a burst. Any value other than -1 will tell the system to randomly emit a number of particles between this value and the num_to_emit value.</p>"

		"Attribute.C_OP_InstantaneousEmitter.m_nMaxEmittedPerFrame" ""
		"Attribute.C_OP_InstantaneousEmitter.m_nMaxEmittedPerFrame:shorthelp" ""
		"Attribute.C_OP_InstantaneousEmitter.m_nMaxEmittedPerFrame:help" "<p>The maximum number of particles to emit per frame.</p>
<p>For example, if the game is running at 30 frames per second and this value is set to 1, then 30 particles will be emitted in one second. Keep in mind that even though the particles are emitted at a different time, they will all die together at the same time. Therefore, if lifetime random is set to 2, then every particle regardless of when it was created will be removed after 2 seconds of the system's lifetime.</p>"

		"Attribute.C_OP_ContinuousEmitter.m_flStartTime" ""
		"Attribute.C_OP_ContinuousEmitter.m_flStartTime:shorthelp" ""
		"Attribute.C_OP_ContinuousEmitter.m_flStartTime:help" "Time at which to begin emitting particles (seconds)."

		"Attribute.C_OP_ContinuousEmitter.m_flEmitRate" ""
		"Attribute.C_OP_ContinuousEmitter.m_flEmitRate:shorthelp" ""
		"Attribute.C_OP_ContinuousEmitter.m_flEmitRate:help" "Number of particles to spawn (per second)."

		"Attribute.C_OP_ContinuousEmitter.m_flEmissionDuration" ""
		"Attribute.C_OP_ContinuousEmitter.m_flEmissionDuration:shorthelp" ""
		"Attribute.C_OP_ContinuousEmitter.m_flEmissionDuration:help" "Length of time to continue emitting particles (seconds)."

		"Element.C_INIT_SequenceLifeTime" ""
		"Element.C_INIT_SequenceLifeTime:shorthelp" ""
		"Element.C_INIT_SequenceLifeTime:help" "<p>Sets a particle's lifespan based on the animation length of the sequence based at the given framerate. Used when a single particle type consists of many sequences with varying sequence lengths (some have 10 frames, others 60, but all must act appropriately without slow framerate, etc.)</p>
<p><i>Note:</i> If the 'use animation rate as FPS' flag of Render_Animated_Sprites has the same FPS settings, a particle will map it lifespan and animation together perfectly.</p>"

		"Attribute.C_INIT_SequenceLifeTime.m_flFramerate" ""
		"Attribute.C_INIT_SequenceLifeTime.m_flFramerate:shorthelp" ""
		"Attribute.C_INIT_SequenceLifeTime.m_flFramerate:help" "Sets the desired FPS for the animation. This is mapped to lifespan according to the number of frames in the sequence the particle receives via a <b>sequence_random</b> or other sequence-defining initializer."

		"Element.C_INIT_AgeNoise" "Lifetime Pre-Age Noise"
		"Element.C_INIT_AgeNoise:shorthelp" ""
		"Element.C_INIT_AgeNoise:help" "Treats a particle as if it has already spent part of its lifespan. All operators that test particle lifespan will act appropriately."

		"Attribute.C_INIT_AgeNoise.m_flNoiseScale" ""
		"Attribute.C_INIT_AgeNoise.m_flNoiseScale:shorthelp" ""
		"Attribute.C_INIT_AgeNoise.m_flNoiseScale:help" "This sets the scale of the time part of the noise function - based on particle spawn time. Larger numbers will appear increasingly random, while very small numbers will map to a similar area of the noise and look very similar."

		"Attribute.C_INIT_AgeNoise.m_flNoiseScaleLoc" ""
		"Attribute.C_INIT_AgeNoise.m_flNoiseScaleLoc:shorthelp" ""
		"Attribute.C_INIT_AgeNoise.m_flNoiseScaleLoc:help" "This sets the scale of the spatial part of the noise function - based on particle spawn location. Larger numbers will appear increasingly random, while very small numbers will map to a similar area of the noise and look very similar. Time noise is added to spatial noise, so set one or the other to zero in order to receive no effect from that portion of the function."

		"Attribute.C_INIT_AgeNoise.m_vecOffsetLoc" ""
		"Attribute.C_INIT_AgeNoise.m_vecOffsetLoc:shorthelp" ""
		"Attribute.C_INIT_AgeNoise.m_vecOffsetLoc:help" "This sets the offset on the noise function to draw from. Essentially moves the result of a given spatial input to a different seed."

		"Attribute.C_INIT_AgeNoise.m_bAbsVal" ""
		"Attribute.C_INIT_AgeNoise.m_bAbsVal:shorthelp" ""
		"Attribute.C_INIT_AgeNoise.m_bAbsVal:help" "Noise returns -1 to 1 which is mapped to the output range. Using absolute value bool (0/1) , the output can have sudden shifts in direction as the number approaches zero and then bounces back into positives instead of going into negatives."

		"Attribute.C_INIT_AgeNoise.m_bAbsValInv" ""
		"Attribute.C_INIT_AgeNoise.m_bAbsValInv:shorthelp" ""
		"Attribute.C_INIT_AgeNoise.m_bAbsValInv:help" "Essentially flips the curve created by using the absolute value flag. So instead of getting sharp valleys, you get sharp peaks. The math is 1 minus the absolute value of the noise."

		"Element.C_INIT_MoveBetweenPoints" "Move Particles Between 2 Control Points"
		"Element.C_INIT_MoveBetweenPoints:shorthelp" ""
		"Element.C_INIT_MoveBetweenPoints:help" "<p>Moves the particles between 2 control points at a value between the minimum and maximum speed. Can be extremely useful for particle tracers, laser sights/beams, and Halo-esque sniper-rifle trails.</p>
<p><i>Note:</i> Normally, this initializer moves particles to the end control point and leaves them there (i.e., if new particles are created, they will spawn at the end control point and immediately vanish). To get around this, add a ''Position Along Path Sequential'' initializer with start and end control points of 0 ABOVE the ''Move Particles Between 2 Control Points'' entry.</p>"

		"Attribute.C_INIT_MoveBetweenPoints.m_flStartOffset" ""
		"Attribute.C_INIT_MoveBetweenPoints.m_flStartOffset:shorthelp" ""
		"Attribute.C_INIT_MoveBetweenPoints.m_flStartOffset:help" "Offset of where the particles start relative to the starting control point and direction of movement."

		"Attribute.C_INIT_MoveBetweenPoints.m_flEndOffset" ""
		"Attribute.C_INIT_MoveBetweenPoints.m_flEndOffset:shorthelp" ""
		"Attribute.C_INIT_MoveBetweenPoints.m_flEndOffset:help" "The spread of the particles relative to the end control point. Think of this as how spray works with a gun."

		"Element.C_INIT_PositionOffset" "Position Modify Offset Random"
		"Element.C_INIT_PositionOffset:shorthelp" ""
		"Element.C_INIT_PositionOffset:help" "Moves the initial position of a particle in world or local space relative to its emission point.</p>
<p>Generally used in combination with other Position initializers. For example, it can be used to emit particles along a line while still using parts of a sphere emitter.</p>"

		"Attribute.C_INIT_PositionOffset.m_bLocalCoords" ""
		"Attribute.C_INIT_PositionOffset.m_bLocalCoords:shorthelp" ""
		"Attribute.C_INIT_PositionOffset.m_bLocalCoords:help" "This bool (0/1) sets where to use world or local (emitter) space to do the offset."

		"Attribute.C_INIT_PositionOffset.m_bProportional" ""
		"Attribute.C_INIT_PositionOffset.m_bProportional:shorthelp" ""
		"Attribute.C_INIT_PositionOffset.m_bProportional:help" "This bool (0/1) sets whether to treat the offset values as an amount relative to the particle's radius. For example, if the offset is set to 0 0 1, and two particles have a radii of 32 and 64, they'd be moved vertically 32 and 64 units respectively."

		"Element.C_INIT_PositionWarp" ""
		"Element.C_INIT_PositionWarp:shorthelp" ""
		"Element.C_INIT_PositionWarp:help" "<p>Warps the initial position of a particle in world or local space relative to its emission point. Can be used to stretch initial emission shapes. A sphere can be stretched into an ovoid, or smashed.</p>
<p>Useful in addition to sphere emissions distance bias and absolute value to create squashed domes, rings (the elongated ring seen in Portal), etc. Warped particles' initial speed is also warped by the corresponding amount. So particles that are stretched will have a higher initial velocity, while those that are squashed will have lower.</p>"

		"Attribute.C_INIT_PositionWarp.m_flWarpTime" ""
		"Attribute.C_INIT_PositionWarp.m_flWarpTime:shorthelp" ""
		"Attribute.C_INIT_PositionWarp.m_flWarpTime:help" "Treats the min/max as start and end sizes for a warp that takes place over the specified time. So the emission placement of each new particle will be warped over time."

		"Attribute.C_INIT_PositionWarp.m_bInvertWarp" ""
		"Attribute.C_INIT_PositionWarp.m_bInvertWarp:shorthelp" ""
		"Attribute.C_INIT_PositionWarp.m_bInvertWarp:help" "In the case of a warp transition, it will make it run backwards (max to min)."

		"Attribute.C_INIT_CreateWithinSphere.m_fRadiusMin" ""
		"Attribute.C_INIT_CreateWithinSphere.m_fRadiusMin:shorthelp" ""
		"Attribute.C_INIT_CreateWithinSphere.m_fRadiusMin:help" "Minimum distance to spawn from the center of the sphere."

		"Attribute.C_INIT_CreateWithinSphere.m_fRadiusMax" ""
		"Attribute.C_INIT_CreateWithinSphere.m_fRadiusMax:shorthelp" ""
		"Attribute.C_INIT_CreateWithinSphere.m_fRadiusMax:help" "Maximum distance to spawn from the center of the sphere."

		"Attribute.C_INIT_CreateWithinSphere.m_vecDistanceBias" ""
		"Attribute.C_INIT_CreateWithinSphere.m_vecDistanceBias:shorthelp" ""
		"Attribute.C_INIT_CreateWithinSphere.m_vecDistanceBias:help" "A bias to the distribution of particles in the system in X Y Z relative to each axis. 1 1 0 will create particles only in the X Y plane, while 1 1 10 will create roughly 10 times as many particles near the top and bottom of the sphere as on the X Y parts. Useful for creating discs, rings, and polar effects."

		"Attribute.C_INIT_CreateWithinSphere.m_vecDistanceBiasAbs" ""
		"Attribute.C_INIT_CreateWithinSphere.m_vecDistanceBiasAbs:shorthelp" ""
		"Attribute.C_INIT_CreateWithinSphere.m_vecDistanceBiasAbs:help" "Setting any axis to one will eliminate particles from one hemisphere of the distribution. Can be used to create hemispheres, quarter spheres, etc. Use wil distance bias to alter the effect. Use negative values in distance bias to flip the hemisphere from one side to the other."

		"Attribute.C_INIT_CreateWithinSphere.m_fSpeedMin" ""
		"Attribute.C_INIT_CreateWithinSphere.m_fSpeedMin:shorthelp" ""
		"Attribute.C_INIT_CreateWithinSphere.m_fSpeedMin:help" "Minimum initial speed of the particle emitted outward from the sphere."

		"Attribute.C_INIT_CreateWithinSphere.m_fSpeedMax" ""
		"Attribute.C_INIT_CreateWithinSphere.m_fSpeedMax:shorthelp" ""
		"Attribute.C_INIT_CreateWithinSphere.m_fSpeedMax:help" "Maximum initial speed of the particle emitted outward from the sphere."

		"Attribute.C_INIT_CreateWithinSphere.m_fSpeedRandExp" ""
		"Attribute.C_INIT_CreateWithinSphere.m_fSpeedRandExp:shorthelp" ""
		"Attribute.C_INIT_CreateWithinSphere.m_fSpeedRandExp:help" "The exponent which determines the biasing of particles towards one end or the other of the random range."

		"Attribute.C_INIT_CreateWithinSphere.m_LocalCoordinateSystemSpeedMin" ""
		"Attribute.C_INIT_CreateWithinSphere.m_LocalCoordinateSystemSpeedMin:shorthelp" ""
		"Attribute.C_INIT_CreateWithinSphere.m_LocalCoordinateSystemSpeedMin:help" "Local space minimum initial speed of the particle in x y z."

		"Attribute.C_INIT_CreateWithinSphere.m_LocalCoordinateSystemSpeedMax" ""
		"Attribute.C_INIT_CreateWithinSphere.m_LocalCoordinateSystemSpeedMax:shorthelp" ""
		"Attribute.C_INIT_CreateWithinSphere.m_LocalCoordinateSystemSpeedMax:help" "Local space maximum initial speed of the particle in x y z."

		"Element.C_INIT_CreationNoise" "Remap Noise to Scalar"
		"Element.C_INIT_CreationNoise:shorthelp" ""
		"Element.C_INIT_CreationNoise:help" "Allows any scalar parameter to be initialized to a select range via a noise function. The noise function is mapped based on both time and space, each with their own coordinate scales and offsets. This creates a range of results that are non-random but vary based on creation time and position."

		"Attribute.C_INIT_CreationNoise.m_flNoiseScale" ""
		"Attribute.C_INIT_CreationNoise.m_flNoiseScale:shorthelp" ""
		"Attribute.C_INIT_CreationNoise.m_flNoiseScale:help" "This sets the scale of the time part of the noise function - based on particle spawn time. Larger numbers will appear increasingly random, while very small numbers will map to a similar area of the noise and look very similar."

		"Attribute.C_INIT_CreationNoise.m_flNoiseScaleLoc" ""
		"Attribute.C_INIT_CreationNoise.m_flNoiseScaleLoc:shorthelp" ""
		"Attribute.C_INIT_CreationNoise.m_flNoiseScaleLoc:help" "This sets the scale of the spatial part of the noise function - based on particle spawn location. Larger numbers will appear increasingly random, while very small numbers will map to a similar area of the noise and look very similar. Time noise is added to spatial noise, so set one or the other to zero in order to receive no effect from that portion of the function."

		"Attribute.C_INIT_CreationNoise.m_nFieldOutput" ""
		"Attribute.C_INIT_CreationNoise.m_nFieldOutput:shorthelp" ""
		"Attribute.C_INIT_CreationNoise.m_nFieldOutput:help" "The scalar to set the initial value on. Radius, Roll, Alpha, Life Duration, etc."

		"Attribute.C_INIT_CreationNoise.m_flOffset" ""
		"Attribute.C_INIT_CreationNoise.m_flOffset:shorthelp" ""
		"Attribute.C_INIT_CreationNoise.m_flOffset:help" "This sets the offset on the noise function to draw from. Two initial scalar noise functions set to different outputs (say alpha and radius) set to the same coordinate scales will behave the same. Offsets allow for the same scale mapping, but at a different part of the noise. So for example all small radius particles may have a high alpha rather than a low one if the offset is used."

		"Attribute.C_INIT_CreationNoise.m_vecOffsetLoc" ""
		"Attribute.C_INIT_CreationNoise.m_vecOffsetLoc:shorthelp" ""
		"Attribute.C_INIT_CreationNoise.m_vecOffsetLoc:help" "This sets the offset on the noise function to draw from. Two initial scalar noise functions set to different outputs (say alpha and radius) set to the same coordinate scales will behave the same. Offsets allow for the same scale mapping, but at a different part of the noise. So for example all small radius particles may have a high alpha rather than a low one if the offset is used."

		"Attribute.C_INIT_CreationNoise.m_bAbsVal" ""
		"Attribute.C_INIT_CreationNoise.m_bAbsVal:shorthelp" ""
		"Attribute.C_INIT_CreationNoise.m_bAbsVal:help" "Noise returns -1 to 1 which is mapped to the output range. Using absolute value bool (0/1) , the output can have sudden shifts in direction as the number approaches zero and then bounces back into positives instead of going into negatives."

		"Attribute.C_INIT_CreationNoise.m_bAbsValInv" ""
		"Attribute.C_INIT_CreationNoise.m_bAbsValInv:shorthelp" ""
		"Attribute.C_INIT_CreationNoise.m_bAbsValInv:help" "Essentially flips the curve created by using the absolute value flag. So instead of getting sharp valleys, you get sharp peaks. The math is 1 minus the absolute value of the noise."

		"Element.C_INIT_RandomSequence" "Sequence Random"
		"Element.C_INIT_RandomSequence:shorthelp" ""
		"Element.C_INIT_RandomSequence:help" "When using a multi-frame texture, this allows particles to randomly start at a minimum and maximum supplied frame."

		"Element.C_INIT_InitialVelocityNoise" "Velocity Noise"
		"Element.C_INIT_InitialVelocityNoise:shorthelp" ""
		"Element.C_INIT_InitialVelocityNoise:help" "Allows particle velocity to be initialized to a select range via a noise function. The noise function is mapped based on both time and space, each with their own coordinate scales and offsets. This creates a range of results that are non-random but vary based on creation time and position."

		"Element.C_OP_PositionLock" "Movement Lock to Control Point"
		"Element.C_OP_PositionLock:shorthelp" ""
		"Element.C_OP_PositionLock:help" "Causes particles to inherit the movement (and optionally rotation) of a control point."

		"Element.C_OP_DampenToCP" "Movement Dampen Relative to Control Point"
		"Element.C_OP_DampenToCP:shorthelp" ""
		"Element.C_OP_DampenToCP:help" "<p>Drains a particle's internal velocity as it approaches the specified control point. If no other forces are acting on it, the particle will eventually stop.</p>
<p>This can be used with operator ''Movement Lock to Control Point'' (and its distance fade property) to have a control point ''capture'' particles near it then draw them along. It can also lock endpoints of a line of particles while allowing the middle section to move freely.</p>"

		"Element.C_OP_VelocityMatchingForce" "Movement Match Particle Velocities"
		"Element.C_OP_VelocityMatchingForce:shorthelp" ""
		"Element.C_OP_VelocityMatchingForce:help" "Forces particles to inherit the velocity of the first one emitted. Can copy the recorded value to a control point."

		"Element.C_OP_InterpolateRadius" "Radius Scale"
		"Element.C_OP_InterpolateRadius:shorthelp" ""
		"Element.C_OP_InterpolateRadius:help" "<p>Scales particles from the start to end scale over the specified time. Multiple Radius Scale operators can be used in an effect as long as their time coverage doesn't overlap.</p>"

		"Element.C_OP_SpinUpdate" "Rotation Basic"
		"Element.C_OP_SpinUpdate:shorthelp" ""
		"Element.C_OP_SpinUpdate:help" "<p>This simply enables rotation through the effect's Base Properties (<b>rotation_speed</b>) or through the initializer ''Rotation Speed Random''.</p>
<p>Particle rotation can also be achieved with the operators ''Rotation Spin Roll'' and ''Rotation Spin Yaw'', which do not require the ''Rotation Basic'' operator.</p>"

		"Element.C_INIT_RandomRotation" "Rotation Random"
		"Element.C_INIT_RandomRotation:shorthelp" ""
		"Element.C_INIT_RandomRotation:help" "<p>Randomly picks an initial rotation value for each particle within the specified range. The axis is chosen through the <b>rotation field</b> property.</p>
<p><b><i>NOTE</i></b>: The properties <b>yaw_offset_min</b> and <b>yaw_offset_max</b> are mis-named at the time of this writing. They should instead read ''rotation min'' and ''rotation max'' - these define the range.</p>"

		"Attribute.CBaseRendererSource2.m_hTexture" "Texture"
		"Attribute.CBaseRendererSource2.m_hTexture:shorthelp" ""
		"Attribute.CBaseRendererSource2.m_hTexture:help" "<p>The source texture to be applied to each particle. Eligible files use the extension *.vtex.</p>"

		"Attribute.CParticleSystemDefinition.m_bViewModelEffect" "View Model Effect"
		"Attribute.CParticleSystemDefinition.m_bViewModelEffect:shorthelp" ""
		"Attribute.CParticleSystemDefinition.m_bViewModelEffect:help" "Used for effects that are attached to player weapons/hands in first-person games."

		"Attribute.CParticleSystemDefinition.m_bScreenSpaceEffect" "Screen Space Effect"
		"Attribute.CParticleSystemDefinition.m_bScreenSpaceEffect:shorthelp" ""
		"Attribute.CParticleSystemDefinition.m_bScreenSpaceEffect:help" "Tells the effect to render in screen space (on the picture plane) rather than in world space."

		"Attribute.CParticleSystemDefinition.m_flConstantRadius" "Radius"
		"Attribute.CParticleSystemDefinition.m_flConstantRadius:shorthelp" ""
		"Attribute.CParticleSystemDefinition.m_flConstantRadius:help" "<p>Radius for each particle, in world units.</p>"

		"Attribute.CParticleSystemDefinition.m_ConstantColor" "Color"
		"Attribute.CParticleSystemDefinition.m_ConstantColor:shorthelp" ""
		"Attribute.CParticleSystemDefinition.m_ConstantColor:help" "Base color tint for each particle."

		"Element.ParticleChildrenInfo_t" "Child Effect"
		"Element.ParticleChildrenInfo_t:shorthelp" ""
		"Element.ParticleChildrenInfo_t:help" "<p>Any effect can be a child of any other effect (with the exception of infinitely-recursive hierarchies.)</p>
<p>Hierarchies are useful for keeping effects organized. They can also promote efficient reuse and modularity of effects. Furthermore, when combined with advanced parent-to-child control point passing, hierarchies become an extremely powerful tool.</p>"

		"Attribute.ParticleChildrenInfo_t.m_flDelay" "Delay"
		"Attribute.ParticleChildrenInfo_t.m_flDelay:shorthelp" ""
		"Attribute.ParticleChildrenInfo_t.m_flDelay:help" "Delay time, in seconds, before the child effect is triggered."

		"Attribute.ParticleChildrenInfo_t.m_bEndCap" "End Cap Effect"
		"Attribute.ParticleChildrenInfo_t.m_bEndCap:shorthelp" ""
		"Attribute.ParticleChildrenInfo_t.m_bEndCap:help" "<p>End cap effects are triggered <i>when the parent effect is destroyed</i>.</p>
<p>So, for example, a projectile effect might have an explosion as its child - when set as an end cap, the explosion will play automatically when the projectile is destroyed (i.e. when it hits its target.)</p>"

		"Attribute.ParticleChildrenInfo_t.m_bDisableChild" "Disable Child Effect"
		"Attribute.ParticleChildrenInfo_t.m_bDisableChild:shorthelp" ""
		"Attribute.ParticleChildrenInfo_t.m_bDisableChild:help" "<p>A quick way to hide a child effect without having to remove it completely.</p>"

		"Element.C_OP_ConstrainDistance" "Constrain Distance to Control Point"
		"Element.C_OP_ConstrainDistance:shorthelp" ""
		"Element.C_OP_ConstrainDistance:help" "<p>Locks particles's positions to a specified radial range from a control point.</p>"

		"Attribute.CParticleOperatorInstance.m_bDisableOperator" "Disable"
		"Attribute.CParticleOperatorInstance.m_bDisableOperator:shorthelp" ""
		"Attribute.CParticleOperatorInstance.m_bDisableOperator:help" "Allows temporary disabling of operators without having to remove them completely."

		"Attribute.CBaseRendererSource2.m_flSelfIllumAmount" "Self-Illumination Amount"
		"Attribute.CBaseRendererSource2.m_flSelfIllumAmount:shorthelp" ""
		"Attribute.CBaseRendererSource2.m_flSelfIllumAmount:help" "<p>The degree to which the <i>unlit</i> texture color adds to the lighting calculation.</p>
<p>The easiest way to think of it is as an ambient lighting value for the particle system. So 0.0 will result in a diffuse lit particle. 0.5 will result in a diffuse lit particle but with an added ambient lighting value of 0.5.</p>
"

		"Attribute.CBaseRendererSource2.m_bAdditive" "Use Additive Blending"
		"Attribute.CBaseRendererSource2.m_bAdditive:shorthelp" ""
		"Attribute.CBaseRendererSource2.m_bAdditive:help" "<p>Toggles whether particles will <a href=''https://en.wikipedia.org/wiki/Additive_color''>blend additively</a>.</p>"

		"Attribute.CBaseRendererSource2.m_flDiffuseAmount" "Diffuse Lighting Amount"
		"Attribute.CBaseRendererSource2.m_flDiffuseAmount:shorthelp" ""
		"Attribute.CBaseRendererSource2.m_flDiffuseAmount:help" "<p>Degree to which particles will receive scene lighting, with 0 being completely unlit (dark).</p>"

		"Element.C_OP_RenderProjected" "Projected Texture Renderer"
		"Element.C_OP_RenderProjected:shorthelp" ""
		"Element.C_OP_RenderProjected:help" "<p>Renders projected textures, which are capable of certain behaviors that are otherwise difficult to achieve.</p>
<p>Take, for example, a large scorch-mark on the ground. If you used a flat sprite (even one oriented to the ground polygon on which it sat), it still wouldn't look right if it crossed polygon boundaries that changed angles or elevation. A projected texture, however, will conform to the surfaces upon which it's projected.</p>
<p><i>Note that unlike many other effect renderers, this one takes a VMAT rather than a VTEX. VMATs are authored in the Material Editor, and should be shader type ''Projected Dota''.</i></p>"

		"Element.C_OP_RenderDeferredLight" "Deferred Light Renderer"
		"Element.C_OP_RenderDeferredLight:shorthelp" ""
		"Element.C_OP_RenderDeferredLight:help" "<p>Renders one or more real-time (but not shadow-casting) light sources based on particle positions.</p>"

		"Element.C_OP_SetControlPointPositions" "Set Control Point Positions"
		"Element.C_OP_SetControlPointPositions:shorthelp" ""
		"Element.C_OP_SetControlPointPositions:help" "<p>Allows the manual positioning of up to four control points.</p>
<p>If you're only setting one CP, consider using ''Set Single Control Point Position'' instead.</p>"

		"Element.C_OP_SetSingleControlPointPosition" "Set Single Control Point Position"
		"Element.C_OP_SetSingleControlPointPosition:shorthelp" ""
		"Element.C_OP_SetSingleControlPointPosition:help" "<p>Allows the manual positioning of a single control point.</p>"

		"Element.C_INIT_CreateSequentialPath" "Position Along Path Sequential"
		"Element.C_INIT_CreateSequentialPath:shorthelp" ""
		"Element.C_INIT_CreateSequentialPath:help" "<p>Initializes particle positions sequentially along a line between two control points.</p>"

		"Element.C_INIT_CreateAlongPath" "Position Along Path Random"
		"Element.C_INIT_CreateAlongPath:shorthelp" ""
		"Element.C_INIT_CreateAlongPath:help" "<p>Initializes particle positions randomly along a line between two control points.</p>"

		"Element.C_OP_RandomForce" "Random Force"
		"Element.C_OP_RandomForce:shorthelp" ""
		"Element.C_OP_RandomForce:help" "<p>Generates a random force within the specified range that's applied uniformly to all particles within the effect.</p>"

		"Element.C_OP_ForceBasedOnDistanceToPlane" "Force Based on Distance from Plane"
		"Element.C_OP_ForceBasedOnDistanceToPlane:shorthelp" ""
		"Element.C_OP_ForceBasedOnDistanceToPlane:help" "<p>Applies a force to each particle based on its distance from a specified plane. (You can think of this as simply remapping a distance to a force range.)</p>"

		"Element.C_INIT_CreateInEpitrochoid" "Position Along Epitrochoid"
		"Element.C_INIT_CreateInEpitrochoid:shorthelp" ""
		"Element.C_INIT_CreateInEpitrochoid:help" "<p>Initializes particle positions within an <a href=''https://en.wikipedia.org/wiki/Epitrochoid''>epitrochoid</a>.</p>
<p>Notably, this position initializer can be used to modify another position initializer if <b>offset from existing position</b> is checked. With the right combination of position initializers and epitrochoid settings, you can achieve positional noise with more coherence than simple random ranges offer.</p>"

		"Element.C_INIT_RingWave" "Position Along Ring"
		"Element.C_INIT_RingWave:shorthelp" ""
		"Element.C_INIT_RingWave:help" "<p>Initializes particle positions along a whole or partial ring.</p>
<p>Like ''Position Within Sphere Random'', this initializer has additional functionality that can impart radial force to particles via <b>min initial speed</b> and <b>max initial speed</b>.</p>"

		"Element.C_INIT_RemapScalarToVector" "Remap Scalar to Vector"
		"Element.C_INIT_RemapScalarToVector:shorthelp" ""
		"Element.C_INIT_RemapScalarToVector:help" "<p>Upon particle initialization, remap any starting scalar (alpha, radius, etc.) to any starting vector (position, color, etc.)</p>"

		"Element.C_OP_Cull" "Cull Random"
		"Element.C_OP_Cull:shorthelp" ""
		"Element.C_OP_Cull:help" "<p>Randomly destroys <b>Cull Percentage</b> of existing particles in the effect between <b>Cull Start Time</b> and <b>Cull End Time</b>.</p>"

		"Element.C_OP_SetControlPointToCenter" "Set Control Point to Particles' Center"
		"Element.C_OP_SetControlPointToCenter:shorthelp" ""
		"Element.C_OP_SetControlPointToCenter:help" "<p>Finds the centroid of all particles in the effect and sets the specified control point to that position.</p>
<p><i>Note that this takes place on the effect level, rather than per-particle.</i></p>"

		"Element.C_INIT_RemapSpeedToScalar" "Remap Speed to Scalar"
		"Element.C_INIT_RemapSpeedToScalar:shorthelp" ""
		"Element.C_INIT_RemapSpeedToScalar:help" "<p>Remaps either a control point's speed (effect-level) or each particle's speed (particle-level) to a scalar value.</p>"

		"Element.C_OP_ColorInterpolate" "Color Fade"
		"Element.C_OP_ColorInterpolate:shorthelp" ""
		"Element.C_OP_ColorInterpolate:help" "<p>Within the specified time, each particle fades from its color at <b>fade_start_time</b> to <b>color_fade</b>.</p>"

		"Element.C_OP_VectorNoise" "Noise Vector"
		"Element.C_OP_VectorNoise:shorthelp" ""
		"Element.C_OP_VectorNoise:help" "<p>Remaps a noise function to any exposed vector. The noise function is mapped based on both time and space, each with their own coordinate scales and offsets.</p>
<p>This creates a range of results that are non-random but vary based on creation time and position.</p>"

		"Element.C_OP_Noise" "Noise Scalar"
		"Element.C_OP_Noise:shorthelp" ""
		"Element.C_OP_Noise:help" "<p>Remaps a noise function to any exposed scalar. The noise function is mapped based on both time and space, each with their own coordinate scales and offsets.</p>
<p>This creates a range of results that are non-random but vary based on creation time and position.</p>"

		"Element.C_OP_InheritFromParentParticles" "Inherit Attribute from Parent Particle"
		"Element.C_OP_InheritFromParentParticles:shorthelp" ""
		"Element.C_OP_InheritFromParentParticles:help" "<p>Assigns a parent particle's attribute to each particle within the system.</p>
<p>This differs from the initializer ''Inherit Initial Value from Parent Particle'' in that the parent's attribute will be inherited every frame in real-time.</p>"

		"Element.C_INIT_InheritFromParentParticles" "Inherit Initial Value from Parent Particle"
		"Element.C_INIT_InheritFromParentParticles:shorthelp" ""
		"Element.C_INIT_InheritFromParentParticles:help" "<p>Assigns a parent particle's attribute to each particle's initial value for that attribute.</p>
<p>This differs from the operator ''Inherit Attribute from Parent Particle'' in that it runs only once, on particle initialization.</p>"

		"Element.C_OP_ClampScalar" "Clamp Scalar"
		"Element.C_OP_ClampScalar:shorthelp" ""
		"Element.C_OP_ClampScalar:help" "<p>Limits the specified scalar's value to a range between <b>output minimum</b> and <b>output maximum</b>.</p>"

		"Element.C_OP_ClampVector" "Clamp Vector"
		"Element.C_OP_ClampVector:shorthelp" ""
		"Element.C_OP_ClampVector:help" "<p>Limits the specified vector's value to a range between <b>output minimum</b> and <b>output maximum</b>.</p>"

		"Element.C_OP_Spin" "Rotation Spin Roll"
		"Element.C_OP_Spin:shorthelp" ""
		"Element.C_OP_Spin:help" "<p>Rotates each particle along the ''roll'' axis.</p>"

		"Element.C_OP_SpinYaw" "Rotation Spin Yaw"
		"Element.C_OP_SpinYaw:shorthelp" ""
		"Element.C_OP_SpinYaw:help" "<p>Rotates each particle along the ''yaw'' axis.</p>"

		"Element.C_OP_FadeIn" "Alpha Fade In Random"
		"Element.C_OP_FadeIn:shorthelp" ""
		"Element.C_OP_FadeIn:help" "<p>Fades particles in over a random period of time within the specified range.</p>
<p>Unlike ''Alpha Fade In Simple'', this operator has an option to define your range in seconds rather than a percentage of the particle's lifespan. To use seconds, simply turn the <b>proportional</b> property off.</p>"

		"Element.C_OP_FadeOut" "Alpha Fade Out Random"
		"Element.C_OP_FadeOut:shorthelp" ""
		"Element.C_OP_FadeOut:help" "<p>Fades particles out over a random period of time within the specified range.</p>
<p>Unlike ''Alpha Fade Out Simple'', this operator has an option to define your range in seconds rather than a percentage of the particle's lifespan. To use seconds, simply turn the <b>proportional</b> property off.</p>"

		"Element.C_OP_FadeAndKill" "Alpha Fade and Decay"
		"Element.C_OP_FadeAndKill:shorthelp" ""
		"Element.C_OP_FadeAndKill:help" "<p>Essentially combines the three operators ''Lifespan Decay'', ''Alpha Fade In Simple'', and ''Alpha Fade Out Simple''.</p>"

		"Element.C_OP_PlaneCull" "Cull When Crossing Plane"
		"Element.C_OP_PlaneCull:shorthelp" ""
		"Element.C_OP_PlaneCull:help" "<p>Instantly destroys particles when they pass the specified plane.</p>"

		"Element.C_OP_SetControlPointToImpactPoint" "Set Control Point to Impact Point"
		"Element.C_OP_SetControlPointToImpactPoint:shorthelp" ""
		"Element.C_OP_SetControlPointToImpactPoint:help" ""

		"Attribute.CParticleOperatorInstance.m_flOpStartFadeInTime" "Operator Fade: Operator Start Fadein"
		"Attribute.CParticleOperatorInstance.m_flOpStartFadeInTime:shorthelp" ""
		"Attribute.CParticleOperatorInstance.m_flOpStartFadeInTime:help" "<h2>Operator Fade Group</h2>
<p>The properties of the operator fade group enable you to hand-tune exactly when you want an operator to influence your effect. These are standard properties that work on all operators. Depending on the operator, the fade component may or may not function - binary operators that can't logically scale (such as setting control point positions) will ignore fades and simply switch on and off.</p>
<p>Operator fade times are relative to the <i>emitter lifespan</i>, so an operator that fades in after 3 seconds does so relative to the emitters life, not the individual particle.</p>
<p>If an oscillation time is set, fade in and fade out times become 0.0 to 1.0 times relative to that oscillation time. If you wish your operator to oscillate in and out, setting an oscillation time of 4, a fade in of .25 and a fade out of .75 would mean that the operator has no effect for 1 second (one quarter the oscillation cycle time), works for 2 seconds (.25-.75), fades back out at 3 (three quarters of the oscillation cycle time), and then the cycle loops at the 4th second back to the start.</p>
<p><i>Note: The operator fade group is generally considered to be an advanced tool, and is often used only as a last resort in cases where operator-specific control mechanisms are (for whatever reason) proving unsuitable.</i></p>"

		"Attribute.CParticleOperatorInstance.m_flOpEndFadeInTime" "Operator Fade: Operator End Fadein"
		"Attribute.CParticleOperatorInstance.m_flOpEndFadeInTime:shorthelp" ""
		"Attribute.CParticleOperatorInstance.m_flOpEndFadeInTime:help" "<h2>Operator Fade Group</h2>
<p>The properties of the operator fade group enable you to hand-tune exactly when you want an operator to influence your effect. These are standard properties that work on all operators. Depending on the operator, the fade component may or may not function - binary operators that can't logically scale (such as setting control point positions) will ignore fades and simply switch on and off.</p>
<p>Operator fade times are relative to the <i>emitter lifespan</i>, so an operator that fades in after 3 seconds does so relative to the emitters life, not the individual particle.</p>
<p>If an oscillation time is set, fade in and fade out times become 0.0 to 1.0 times relative to that oscillation time. If you wish your operator to oscillate in and out, setting an oscillation time of 4, a fade in of .25 and a fade out of .75 would mean that the operator has no effect for 1 second (one quarter the oscillation cycle time), works for 2 seconds (.25-.75), fades back out at 3 (three quarters of the oscillation cycle time), and then the cycle loops at the 4th second back to the start.</p>
<p><i>Note: The operator fade group is generally considered to be an advanced tool, and is often used only as a last resort in cases where operator-specific control mechanisms are (for whatever reason) proving unsuitable.</i></p>"

		"Attribute.CParticleOperatorInstance.m_flOpStartFadeOutTime" "Operator Fade: Operator Start Fadeout"
		"Attribute.CParticleOperatorInstance.m_flOpStartFadeOutTime:shorthelp" ""
		"Attribute.CParticleOperatorInstance.m_flOpStartFadeOutTime:help" "<h2>Operator Fade Group</h2>
<p>The properties of the operator fade group enable you to hand-tune exactly when you want an operator to influence your effect. These are standard properties that work on all operators. Depending on the operator, the fade component may or may not function - binary operators that can't logically scale (such as setting control point positions) will ignore fades and simply switch on and off.</p>
<p>Operator fade times are relative to the <i>emitter lifespan</i>, so an operator that fades in after 3 seconds does so relative to the emitters life, not the individual particle.</p>
<p>If an oscillation time is set, fade in and fade out times become 0.0 to 1.0 times relative to that oscillation time. If you wish your operator to oscillate in and out, setting an oscillation time of 4, a fade in of .25 and a fade out of .75 would mean that the operator has no effect for 1 second (one quarter the oscillation cycle time), works for 2 seconds (.25-.75), fades back out at 3 (three quarters of the oscillation cycle time), and then the cycle loops at the 4th second back to the start.</p>
<p><i>Note: The operator fade group is generally considered to be an advanced tool, and is often used only as a last resort in cases where operator-specific control mechanisms are (for whatever reason) proving unsuitable.</i></p>"

		"Attribute.CParticleOperatorInstance.m_flOpEndFadeOutTime" "Operator Fade: Operator End Fadeout"
		"Attribute.CParticleOperatorInstance.m_flOpEndFadeOutTime:shorthelp" ""
		"Attribute.CParticleOperatorInstance.m_flOpEndFadeOutTime:help" "<h2>Operator Fade Group</h2>
<p>The properties of the operator fade group enable you to hand-tune exactly when you want an operator to influence your effect. These are standard properties that work on all operators. Depending on the operator, the fade component may or may not function - binary operators that can't logically scale (such as setting control point positions) will ignore fades and simply switch on and off.</p>
<p>Operator fade times are relative to the <i>emitter lifespan</i>, so an operator that fades in after 3 seconds does so relative to the emitters life, not the individual particle.</p>
<p>If an oscillation time is set, fade in and fade out times become 0.0 to 1.0 times relative to that oscillation time. If you wish your operator to oscillate in and out, setting an oscillation time of 4, a fade in of .25 and a fade out of .75 would mean that the operator has no effect for 1 second (one quarter the oscillation cycle time), works for 2 seconds (.25-.75), fades back out at 3 (three quarters of the oscillation cycle time), and then the cycle loops at the 4th second back to the start.</p>
<p><i>Note: The operator fade group is generally considered to be an advanced tool, and is often used only as a last resort in cases where operator-specific control mechanisms are (for whatever reason) proving unsuitable.</i></p>"

		"Attribute.CParticleOperatorInstance.m_flOpFadeOscillatePeriod" "Operator Fade: Operator Fade Oscillate"
		"Attribute.CParticleOperatorInstance.m_flOpFadeOscillatePeriod:shorthelp" ""
		"Attribute.CParticleOperatorInstance.m_flOpFadeOscillatePeriod:help" "<h2>Operator Fade Group</h2>
<p>The properties of the operator fade group enable you to hand-tune exactly when you want an operator to influence your effect. These are standard properties that work on all operators. Depending on the operator, the fade component may or may not function - binary operators that can't logically scale (such as setting control point positions) will ignore fades and simply switch on and off.</p>
<p>Operator fade times are relative to the <i>emitter lifespan</i>, so an operator that fades in after 3 seconds does so relative to the emitters life, not the individual particle.</p>
<p>If an oscillation time is set, fade in and fade out times become 0.0 to 1.0 times relative to that oscillation time. If you wish your operator to oscillate in and out, setting an oscillation time of 4, a fade in of .25 and a fade out of .75 would mean that the operator has no effect for 1 second (one quarter the oscillation cycle time), works for 2 seconds (.25-.75), fades back out at 3 (three quarters of the oscillation cycle time), and then the cycle loops at the 4th second back to the start.</p>
<p><i>Note: The operator fade group is generally considered to be an advanced tool, and is often used only as a last resort in cases where operator-specific control mechanisms are (for whatever reason) proving unsuitable.</i></p>"

		"Attribute.CParticleSystemDefinition.m_nMinGPULevel" "Minimum GPU Level"
		"Attribute.CParticleSystemDefinition.m_nMinGPULevel:shorthelp" ""
		"Attribute.CParticleSystemDefinition.m_nMinGPULevel:help" "This property relies on settings in a game config file, and is best left alone."

		"Attribute.CParticleSystemDefinition.m_nMinCPULevel" "Minimum CPU Level"
		"Attribute.CParticleSystemDefinition.m_nMinCPULevel:shorthelp" ""
		"Attribute.CParticleSystemDefinition.m_nMinCPULevel:help" "This property relies on settings in a game config file, and is best left alone."

		"Attribute.C_OP_RenderSprites.m_flDepthBias" ""
		"Attribute.C_OP_RenderSprites.m_flDepthBias:shorthelp" ""
		"Attribute.C_OP_RenderSprites.m_flDepthBias:help" "Offsets particle depth via the shader. This is more expensive than per particle offsets which can be achieved by using ''visibility camera depth bias''"

		"Attribute.CParticleVisibilityInputs.m_flCameraBias" ""
		"Attribute.CParticleVisibilityInputs.m_flCameraBias:shorthelp" ""
		"Attribute.CParticleVisibilityInputs.m_flCameraBias:help" "Offsets per particle depth from camera. This is cheaper than ''depth comparison bias'' which offsets particle render depth via the shader."

		"Attribute.CParticleSystemDefinition.m_flCullRadius" ""
		"Attribute.CParticleSystemDefinition.m_flCullRadius:shorthelp" ""
		"Attribute.CParticleSystemDefinition.m_flCullRadius:help" "Any other value is hardcoded;
0 Use PArticle Bounds;
-1  Disables Fog of war and is always on;
-2  Do not shrink bounds;
"

		"Attribute.CParticleOperatorInstance.m_nOpEndCapState" ""
		"Attribute.CParticleOperatorInstance.m_nOpEndCapState:shorthelp" ""
		"Attribute.CParticleOperatorInstance.m_nOpEndCapState:help" "<b>-1</b> -> Operate while alive and for endcap (default)
<br> 
<b>0 </b> -> Operate while alive
<br>
<b>1 </b> -> Operate for end cap"

		"Attribute.C_INIT_RingWave.m_flParticlesPerOrbit" ""
		"Attribute.C_INIT_RingWave.m_flParticlesPerOrbit:shorthelp" ""
		"Attribute.C_INIT_RingWave.m_flParticlesPerOrbit:help" "This along with turning on ''even distribution'' will evenly space the particles around the ring using X particles"

		"Attribute.C_INIT_RingWave.m_bEvenDistribution" ""
		"Attribute.C_INIT_RingWave.m_bEvenDistribution:shorthelp" ""
		"Attribute.C_INIT_RingWave.m_bEvenDistribution:help" "Enabling even distribution will evenly space the particles around the ring."

		"Attribute.C_OP_CurlNoiseForce.m_vecOffsetRate" ""
		"Attribute.C_OP_CurlNoiseForce.m_vecOffsetRate:shorthelp" ""
		"Attribute.C_OP_CurlNoiseForce.m_vecOffsetRate:help" "This will increment the noise offset each frame"

		"Attribute.C_OP_CurlNoiseForce.m_vecNoiseScale" ""
		"Attribute.C_OP_CurlNoiseForce.m_vecNoiseScale:shorthelp" ""
		"Attribute.C_OP_CurlNoiseForce.m_vecNoiseScale:help" "Amplitude of the noise"

		"Attribute.C_OP_CurlNoiseForce.m_useCurl" ""
		"Attribute.C_OP_CurlNoiseForce.m_useCurl:shorthelp" ""
		"Attribute.C_OP_CurlNoiseForce.m_useCurl:help" "toggle between dnoise() and curlnoise()"

		"Element.C_OP_CalculateVectorAttribute" ""
		"Element.C_OP_CalculateVectorAttribute:shorthelp" ""
		"Element.C_OP_CalculateVectorAttribute:help" "This lets you specify up to 2 vector attributes (with weights), and up to two control points (with offsets and weights), plus an initial value and a final scale (both vectors). It then does this calculation:

<blockquote>Output_attribute = final scale * ( start value + inputscale1*inputfield1 + inputscale2*inputfield2 + controlpoint1*controlpointscale1 + controlpoint2 * controlpoint2scale);</blockquote>
     
(Then, If the output attribute is ''particle normal'', it will normalize it).<br><br>


This has many uses, and can mix attributes together, normalize attributes, scale them, offset them, etc.

"

		"Element.C_OP_MovementPlaceOnGround" ""
		"Element.C_OP_MovementPlaceOnGround:shorthelp" ""
		"Element.C_OP_MovementPlaceOnGround:help" "if ( m_nRefCP1 > -1 )
{
	if ( ( pParticles->GetControlPointAtCurrentTime( m_nRefCP1 ) - pCtx->m_vecPrevPos1 ).Length() > m_flTolerance )
	{
		bDirty = true;
		pCtx->m_vecPrevPos1 = pParticles->GetControlPointAtCurrentTime( m_nRefCP1 );
		pCtx->m_flLerpTime = pParticles->m_flCurTime;
	}
}"

		"Element.C_OP_RemapCPOrientationToRotations" ""
		"Element.C_OP_RemapCPOrientationToRotations:shorthelp" ""
		"Element.C_OP_RemapCPOrientationToRotations:help" "Two New Options: <br>

<b>Use Quoternions Internally :</b><br> will use the Control points Matrix to extract Quoternion Rotations and apply that to the Orientation of the Particle. 
<br>
<br>
<b>Write Normal instead of Rotation :</b><br> is a sub section of Use Quaternion and will extract the CP Quoternion Fwd (X) Direction and map it to the Particle Normal. 
<br><br>
While Off operator will work as before.
"

		"Attribute.C_OP_RenderStandardLight.m_flFalloffLinearity" "Falloff Linearity"
		"Attribute.C_OP_RenderStandardLight.m_flFalloffLinearity:shorthelp" ""
		"Attribute.C_OP_RenderStandardLight.m_flFalloffLinearity:help" "0.0 = quadratic falloff (harsher)
1.0 = linear falloff (softer)"

		"Attribute.C_OP_WorldTraceConstraint.m_vecCpOffset" ""
		"Attribute.C_OP_WorldTraceConstraint.m_vecCpOffset:shorthelp" ""
		"Attribute.C_OP_WorldTraceConstraint.m_vecCpOffset:help" ""

		"Attribute.C_OP_WorldTraceConstraint.m_nCollisionMode" ""
		"Attribute.C_OP_WorldTraceConstraint.m_nCollisionMode:shorthelp" ""
		"Attribute.C_OP_WorldTraceConstraint.m_nCollisionMode:help" "Colission Modes :
#define COLLISION_MODE_PER_PARTICLE_TRACE 0
#define COLLISION_MODE_PER_FRAME_PLANESET 1
#define COLLISION_MODE_INITIAL_TRACE_DOWN 2
#define COLLISION_MODE_USE_NEAREST_TRACE 3"
	}
}
